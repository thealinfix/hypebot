"""
Command handlers for bot
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import ADMIN_CHAT_ID
from bot.utils.decorators import admin_only, error_handler, log_action, typing_action
from bot.utils.keyboards import KeyboardBuilder
from bot.utils.state import get_state, save_state
from bot.services.scheduler import scheduler

logger = logging.getLogger(__name__)


@error_handler
@log_action("start command")
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command"""
    user = update.effective_user
    is_admin = not ADMIN_CHAT_ID or user.id == ADMIN_CHAT_ID
    
    # Build keyboard
    keyboard = KeyboardBuilder.main_menu(is_admin)
    
    # Build welcome message
    welcome_text = (
        "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
        "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
    )
    
    if is_admin:
        welcome_text += "\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@error_handler
@admin_only
@log_action("preview command")
async def preview_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /preview command"""
    from bot.handlers.callbacks import start_preview_mode
    
    # Create fake callback query
    class FakeQuery:
        def __init__(self, message, user):
            self.message = message
            self.from_user = user
            self.data = "cmd_preview"
        
        async def answer(self):
            pass
        
        async def edit_message_text(self, *args, **kwargs):
            await self.message.edit_text(*args, **kwargs)
    
    fake_query = FakeQuery(update.message, update.effective_user)
    await start_preview_mode(fake_query, context)


@error_handler
@admin_only
@log_action("check command")
@typing_action
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /check command"""
    await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
    
    # Run check job
    from bot.services.scheduler import scheduler
    await scheduler.check_releases_job(context)


@error_handler
@admin_only
@log_action("thoughts command")
async def thoughts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /thoughts command"""
    # Check arguments
    if not context.args:
        await update.message.reply_text(
            "üí≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/thoughts <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ\n\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
        )
        return
    
    # Get topic
    topic = " ".join(context.args)
    
    # Save in state for waiting image
    state = await get_state()
    state["waiting_for_image"] = {
        "type": "thoughts",
        "topic": topic,
        "message_id": update.message.message_id
    }
    await save_state()
    
    # Show process
    await update.message.reply_text(
        "üí≠ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )


@error_handler
async def skip_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /skip command"""
    state = await get_state()
    
    if not state.get("waiting_for_image"):
        await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å")
        return
    
    waiting_data = state["waiting_for_image"]
    state["waiting_for_image"] = None
    await save_state()
    
    if waiting_data["type"] == "thoughts":
        # Generate thoughts without image
        from bot.handlers.messages import generate_thought_without_image
        await generate_thought_without_image(update, context, waiting_data)


@error_handler
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /cancel command"""
    user_id = update.effective_user.id
    if ADMIN_CHAT_ID and user_id != ADMIN_CHAT_ID:
        return
    
    state = await get_state()
    cancelled = []
    
    # Check all waiting states
    if state.get("waiting_for_schedule"):
        state["waiting_for_schedule"] = None
        cancelled.append("–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    
    if state.get("editing_schedule"):
        state["editing_schedule"] = None
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    if state.get("waiting_for_image"):
        state["waiting_for_image"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    if state.get("waiting_for_prompt"):
        state["waiting_for_prompt"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
    
    if state.get("auto_interval_custom"):
        state["auto_interval_custom"] = False
        cancelled.append("—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
    
    if state.get("waiting_for_channel"):
        state["waiting_for_channel"] = False
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
    
    await save_state()
    
    if cancelled:
        await update.message.reply_text(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {', '.join(cancelled)}")
    else:
        await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")


@error_handler
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /help command"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ HypeBot</b>\n\n"
        "üî• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
    )
    
    user_id = update.effective_user.id
    if not ADMIN_CHAT_ID or user_id == ADMIN_CHAT_ID:
        help_text += (
            "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/preview - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã\n"
            "/thoughts - –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ\n"
            "/scheduled - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/reset_state - –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø–∞—Å–Ω–æ!)\n"
        )
    
    help_text += (
        "\n\nüì± <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ SneakerNews\n"
        "‚Ä¢ Hypebeast\n"
        "‚Ä¢ Highsnobiety\n"
        "\nü§ñ <b>–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ DALL-E 3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫\n"
        "‚Ä¢ GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )


@error_handler
@admin_only
@log_action("scheduled command")
async def scheduled_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /scheduled command"""
    from bot.handlers.callbacks import show_scheduled_posts
    
    # Create fake callback query
    class FakeQuery:
        def __init__(self, message, user):
            self.message = message
            self.from_user = user
            self.data = "cmd_scheduled"
        
        async def answer(self):
            pass
        
        async def edit_message_text(self, *args, **kwargs):
            await self.message.reply_text(*args, **kwargs)
    
    fake_query = FakeQuery(update.message, update.effective_user)
    await show_scheduled_posts(fake_query)


@error_handler
@admin_only
@log_action("stats command")
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /stats command"""
    from bot.handlers.callbacks import show_stats_info
    
    # Create fake callback query
    class FakeQuery:
        def __init__(self, message, user):
            self.message = message
            self.from_user = user
            self.data = "cmd_stats"
        
        async def answer(self):
            pass
        
        async def edit_message_text(self, *args, **kwargs):
            await self.message.reply_text(*args, **kwargs)
    
    fake_query = FakeQuery(update.message, update.effective_user)
    await show_stats_info(fake_query)


@error_handler
@admin_only
@log_action("reset_state command")
async def reset_state_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /reset_state command"""
    # Ask for confirmation
    keyboard = KeyboardBuilder.yes_no("reset_state")
    
    await update.message.reply_text(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞?\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –ø–æ—Å—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ!\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@error_handler
@admin_only
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /test command (hidden)"""
    # Test various bot functions
    state = await get_state()
    
    info = (
        "üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(state.get('pending', {}))}\n"
        f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(state.get('scheduled_posts', {}))}\n"
        f"‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {len(state.get('favorites', []))}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(state.get('sent_links', []))}\n"
        f"ü§ñ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª' if state.get('auto_publish') else '–í—ã–∫–ª'}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: <code>{state.get('channel', '–ù–µ –∑–∞–¥–∞–Ω')}</code>\n"
        f"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {state.get('timezone', 'UTC')}\n"
    )
    
    # Get job info
    job_info = scheduler.get_job_info()
    info += "\n<b>–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b>\n"
    for name, data in job_info.items():
        status = "‚úÖ" if data["enabled"] else "‚ùå"
        info += f"{status} {name}"
        if data["next_run"]:
            info += f" (—Å–ª–µ–¥. –∑–∞–ø—É—Å–∫: {data['next_run'][:16]})"
        info += "\n"
    
    await update.message.reply_text(info, parse_mode=ParseMode.HTML)


# Export handlers for registration
command_handlers = [
    ("start", start_command),
    ("help", help_command),
    ("cancel", cancel_command),
    ("skip", skip_command),
    ("preview", preview_command),
    ("check", check_command),
    ("thoughts", thoughts_command),
    ("scheduled", scheduled_command),
    ("stats", stats_command),
    ("reset_state", reset_state_command),
    ("test", test_command),
]
