"""
Callback query handlers
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest

from config import ADMIN_CHAT_ID
from bot.utils.decorators import error_handler
from bot.utils.keyboards import KeyboardBuilder
from bot.utils.state import get_state, update_state, save_state
from bot.utils.time_utils import get_user_timezone, localize_datetime
from bot.utils.tags import filter_posts_by_tags, get_all_unique_tags
from bot.models.post import Post
from bot.services.publisher import publisher
from bot.services.ai_generator import ai_generator
from datetime import datetime

logger = logging.getLogger(__name__)


@error_handler
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Main callback query handler"""
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        user_id = query.from_user.id
        
        # Check admin access for protected callbacks
        is_admin = not ADMIN_CHAT_ID or user_id == ADMIN_CHAT_ID
        
        # Route to appropriate handler
        if data.startswith("cmd_"):
            await handle_menu_commands(query, context, is_admin)
        
        elif data.startswith("settings_"):
            if not is_admin:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            await handle_settings(query, context)
        
        elif data.startswith("tz_"):
            if not is_admin:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            await handle_timezone_selection(query, context)
        
        elif data.startswith("auto_"):
            if not is_admin:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            await handle_auto_publish(query, context)
        
        elif data.startswith("clean_"):
            if not is_admin:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            await handle_clean_commands(query, context)
        
        elif data.startswith("tool_"):
            if not is_admin:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            await handle_tools(query, context)
        
        elif data.startswith("preview_"):
            await handle_preview_navigation(query, context)
        
        elif data.startswith("filter_"):
            await handle_filters(query, context)
        
        elif data.startswith("schedule:"):
            await handle_scheduling(query, context)
        
        elif data.startswith("toggle_fav:"):
            await handle_favorites(query, context)
        
        elif data.startswith("gen_cover"):
            await handle_generate_cover(query, context)
        
        elif data == "noop":
            return
        
        else:
            # Handle moderation actions
            if ":" in data:
                action, post_id = data.split(":", 1)
                if action in ["approve", "reject", "regen"]:
                    await handle_moderation(query, context, action, post_id)
        
    except Exception as e:
        logger.error(f"Error in callback handler: {e}", exc_info=True)
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_menu_commands(query, context, is_admin):
    """Handle menu navigation callbacks"""
    data = query.data
    
    if data == "cmd_status":
        await show_status_info(query)
    
    elif data == "cmd_help":
        await show_help_info(query)
    
    elif data == "cmd_preview" and is_admin:
        await start_preview_mode(query, context)
    
    elif data == "cmd_check" and is_admin:
        await query.edit_message_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
        from bot.services.scheduler import scheduler
        await scheduler.check_releases_job(context)
    
    elif data == "cmd_thoughts" and is_admin:
        await show_thoughts_prompt(query)
    
    elif data == "cmd_scheduled" and is_admin:
        await show_scheduled_posts(query)
    
    elif data == "cmd_stats":
        await show_stats_info(query)
    
    elif data == "cmd_clean_menu" and is_admin:
        await show_clean_menu(query)
    
    elif data == "cmd_tools_menu" and is_admin:
        await show_tools_menu(query)
    
    elif data == "cmd_back_main":
        await show_main_menu(query, is_admin)
    
    elif data == "cmd_auto_menu" and is_admin:
        await show_auto_publish_menu(query)
    
    elif data == "cmd_settings" and is_admin:
        await show_settings_menu(query)


async def handle_preview_navigation(query, context):
    """Handle preview navigation"""
    data = query.data
    state = await get_state()
    
    if data == "preview_close":
        await query.message.delete()
        return
    
    elif data.startswith("preview_next:") or data.startswith("preview_prev:"):
        current_idx = int(data.split(":")[1])
        preview_list = state.get("preview_mode", {}).get("list", [])
        
        if data.startswith("preview_next:"):
            new_idx = min(current_idx + 1, len(preview_list) - 1)
        else:
            new_idx = max(current_idx - 1, 0)
        
        if 0 <= new_idx < len(preview_list):
            uid = preview_list[new_idx]
            record = state["pending"].get(uid)
            if record:
                post = Post.from_dict(record)
                await send_preview(
                    context.bot,
                    post,
                    query.message.chat.id,
                    new_idx,
                    len(preview_list),
                    query.message.message_id
                )
    
    elif data.startswith("preview_full:"):
        uid = data.split(":")[1]
        record = state["pending"].get(uid)
        if record:
            post = Post.from_dict(record)
            await query.message.delete()
            await send_full_post(context.bot, post, query.message.chat.id)


async def handle_moderation(query, context, action, post_id):
    """Handle post moderation actions"""
    state = await get_state()
    record = state["pending"].get(post_id)
    
    if not record:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return
    
    post = Post.from_dict(record)
    
    if action == "approve":
        published = await publisher.publish_post(context.bot, post)
        if published:
            await query.edit_message_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {post.title[:50]}...")
        else:
            await query.edit_message_text(f"üö® –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post.title[:50]}...")
    
    elif action == "reject":
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {post.title[:50]}...")
        state["pending"].pop(post_id, None)
        state["generated_images"].pop(post_id, None)
        await save_state()
    
    elif action == "regen":
        await query.edit_message_text(f"üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è: {post.title[:50]}...")
        
        new_description = await ai_generator.generate_caption(
            post.title,
            post.context,
            post.category
        )
        post.description = new_description
        state["pending"][post_id] = post.to_dict()
        await save_state()
        
        await publisher.send_for_moderation(context.bot, post, ADMIN_CHAT_ID)


# Menu display functions
async def show_main_menu(query, is_admin):
    """Show main menu"""
    keyboard = KeyboardBuilder.main_menu(is_admin)
    
    welcome_text = (
        "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
        "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
    )
    
    if is_admin:
        welcome_text += "\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"
    
    await query.edit_message_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_status_info(query):
    """Show bot status"""
    state = await get_state()
    pending_count = len(state["pending"])
    sent_count = len(state["sent_links"])
    scheduled_count = len(state.get("scheduled_posts", {}))
    
    # Next scheduled post
    next_scheduled = None
    if state.get("scheduled_posts"):
        next_post = min(
            state["scheduled_posts"].items(),
            key=lambda x: x[1]["time"]
        )
        next_time = datetime.fromisoformat(next_post[1]["time"].replace('Z', '+00:00'))
        local_time = localize_datetime(next_time)
        tz = state.get("timezone", "UTC")
        next_scheduled = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {local_time.strftime('%d.%m %H:%M')} ({tz})"
    
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}\n"
        f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {sent_count}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: <code>{state.get('channel', '–ù–µ –∑–∞–¥–∞–Ω')}</code>\n"
    )
    
    if next_scheduled:
        status_text += f"\n{next_scheduled}\n"
    
    keyboard = KeyboardBuilder.back_to_main()
    
    await query.edit_message_text(
        status_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_help_info(query):
    """Show help information"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ HypeBot</b>\n\n"
        "üî• <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ –º–æ–¥—ã\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ –ò–ò\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        "üì± <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ SneakerNews\n"
        "‚Ä¢ Hypebeast\n"
        "‚Ä¢ Highsnobiety\n\n"
        "ü§ñ <b>–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ DALL-E 3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫\n"
        "‚Ä¢ GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "üí¨ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞"
    )
    
    keyboard = KeyboardBuilder.back_to_main()
    
    await query.edit_message_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def start_preview_mode(query, context):
    """Start preview mode"""
    state = await get_state()
    
    if not state["pending"]:
        await query.edit_message_text("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    # Create preview list sorted by date
    preview_list = sorted(
        state["pending"].keys(),
        key=lambda x: state["pending"][x].get("timestamp", ""),
        reverse=True
    )
    
    state["preview_mode"] = {
        "list": preview_list,
        "current": 0
    }
    await save_state()
    
    # Show first post
    first_record = state["pending"].get(preview_list[0])
    if first_record:
        post = Post.from_dict(first_record)
        await send_preview(
            context.bot,
            post,
            query.message.chat.id,
            0,
            len(preview_list),
            query.message.message_id
        )


async def show_scheduled_posts(query):
    """Show scheduled posts"""
    state = await get_state()
    scheduled = state.get("scheduled_posts", {})
    
    if not scheduled:
        text = "üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>"
        keyboard = KeyboardBuilder.back_to_main()
    else:
        text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
        
        for post_id, info in sorted(scheduled.items(), key=lambda x: x[1]["time"]):
            scheduled_time = datetime.fromisoformat(info["time"].replace('Z', '+00:00'))
            local_time = localize_datetime(scheduled_time)
            record = info.get("record", {})
            
            text += (
                f"‚è∞ {local_time.strftime('%d.%m %H:%M')} ({state.get('timezone', 'UTC')})\n"
                f"üìù {record.get('title', 'Unknown')[:50]}...\n"
                f"üìç {record.get('source', 'Unknown')}\n\n"
            )
        
        keyboard = KeyboardBuilder.back_to_main()
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_stats_info(query):
    """Show statistics"""
    state = await get_state()
    pending_count = len(state["pending"])
    sent_count = len(state["sent_links"])
    scheduled_count = len(state.get("scheduled_posts", {}))
    favorites_count = len(state.get("favorites", []))
    
    # Brand stats
    brand_stats = {}
    for post_data in state["pending"].values():
        post = Post.from_dict(post_data)
        for brand in post.tags.get("brands", []):
            brand_stats[brand] = brand_stats.get(brand, 0) + 1
    
    stats_text = (
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}\n"
        f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}\n"
        f"‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {sent_count}\n\n"
    )
    
    if brand_stats:
        stats_text += "üè∑ <b>–ü–æ –±—Ä–µ–Ω–¥–∞–º:</b>\n"
        for brand, count in sorted(brand_stats.items(), key=lambda x: x[1], reverse=True)[:5]:
            stats_text += f"‚Ä¢ {brand.title()}: {count}\n"
    
    keyboard = KeyboardBuilder.back_to_main()
    
    await query.edit_message_text(
        stats_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


# Helper functions
async def send_preview(bot, post, chat_id, current_idx, total, message_id=None):
    """Send post preview"""
    from bot.utils.time_utils import format_date_for_display
    
    state = await get_state()
    is_favorite = post.id in state.get("favorites", [])
    
    # Build preview text
    date_str = format_date_for_display(post.timestamp)
    tags_display = post.get_formatted_tags()
    
    preview_text = (
        f"üìÖ <b>{date_str}</b>\n"
        f"{'üëü' if post.category == 'sneakers' else 'üëî'} <b>{post.title}</b>\n\n"
    )
    
    if tags_display:
        preview_text += f"{tags_display}\n\n"
    
    preview_text += (
        f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {post.source}\n"
        f"üîó <a href=\"{post.link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é</a>\n"
        f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(post.get_all_images())}\n"
    )
    
    if post.generated_images:
        preview_text += f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(post.generated_images)}\n"
    
    if is_favorite:
        preview_text += "‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n"
    
    preview_text += f"\nüìä –ü–æ—Å—Ç {current_idx + 1} –∏–∑ {total}"
    
    # Build keyboard
    keyboard = KeyboardBuilder.preview_navigation(current_idx, total, post.id, is_favorite)
    
    try:
        if message_id:
            return await bot.edit_message_text(
                preview_text,
                chat_id,
                message_id,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        else:
            return await bot.send_message(
                chat_id,
                preview_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
    except BadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            logger.error(f"Error sending preview: {e}")
    except Exception as e:
        logger.error(f"Error sending preview: {e}")


async def send_full_post(bot, post, chat_id):
    """Send full post with content"""
    loading_msg = await bot.send_message(
        chat_id,
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # Parse full content if needed
        if post.needs_parsing:
            from bot.services.parser import parser_service
            post = await parser_service.parse_full_content(post)
            
            # Update in state
            state = await get_state()
            if post.id in state["pending"]:
                state["pending"][post.id] = post.to_dict()
                await save_state()
        
        # Generate description if needed
        if not post.description or post.description == post.title:
            post.description = await ai_generator.generate_caption(
                post.title,
                post.context,
                post.category
            )
            
            # Update in state
            state = await get_state()
            if post.id in state["pending"]:
                state["pending"][post.id]["description"] = post.description
                await save_state()
        
        # Delete loading message
        await bot.delete_message(chat_id, loading_msg.message_id)
        
        # Send for moderation
        await publisher.send_for_moderation(bot, post, chat_id)
        
    except Exception as e:
        logger.error(f"Error sending full post: {e}")
        await bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞",
            chat_id,
            loading_msg.message_id
        )


# Additional menu handlers
async def show_settings_menu(query):
    """Show settings menu"""
    state = await get_state()
    current_channel = state.get("channel", "–ù–µ –∑–∞–¥–∞–Ω")
    current_timezone = state.get("timezone", "UTC")
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{current_channel}</code>\n"
        f"üïê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {current_timezone}\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(get_user_timezone()).strftime('%H:%M')}\n"
    )
    
    keyboard = KeyboardBuilder.settings_menu()
    
    await query.edit_message_text(
        settings_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_clean_menu(query):
    """Show cleanup menu"""
    clean_text = (
        "üßπ <b>–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = KeyboardBuilder.clean_menu()
    
    await query.edit_message_text(
        clean_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_tools_menu(query):
    """Show tools menu"""
    tools_text = (
        "üîß <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b>\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    
    keyboard = KeyboardBuilder.tools_menu()
    
    await query.edit_message_text(
        tools_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_auto_publish_menu(query):
    """Show auto-publish menu"""
    state = await get_state()
    is_enabled = state.get("auto_publish", False)
    interval = state.get("publish_interval", 3600) // 60
    favorites_count = len(state.get("favorites", []))
    
    text = (
        "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if is_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç\n"
        f"–ü–æ—Å—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"
    )
    
    keyboard = KeyboardBuilder.auto_publish_menu(is_enabled, interval)
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def show_thoughts_prompt(query):
    """Show thoughts creation prompt"""
    thoughts_text = (
        "üí≠ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/thoughts –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã</code>\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ</code>\n\n"
        "üì∏ –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
        "üí° –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Å—Ç –≤ –ª–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏"
    )
    
    keyboard = KeyboardBuilder.back_to_main()
    
    await query.edit_message_text(
        thoughts_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


# Settings handlers
async def handle_settings(query, context):
    """Handle settings callbacks"""
    data = query.data
    
    if data == "settings_channel":
        state = await get_state()
        state["waiting_for_channel"] = True
        await save_state()
        
        await query.edit_message_text(
            "üì¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ <code>@channelname</code> - –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ <code>-1001234567890</code> - –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (ID —á–∞—Ç–∞)\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <code>{state.get('channel', '–ù–µ –∑–∞–¥–∞–Ω')}</code>\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode=ParseMode.HTML
        )
    
    elif data == "settings_timezone":
        await show_timezone_menu(query)


async def show_timezone_menu(query):
    """Show timezone selection"""
    keyboard = KeyboardBuilder.timezone_selection()
    
    await query.edit_message_text(
        "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


async def handle_timezone_selection(query, context):
    """Handle timezone selection"""
    data = query.data
    timezone_name = data.replace("tz_", "").replace("_", "/")
    
    await update_state("timezone", timezone_name)
    
    await query.edit_message_text(
        f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {timezone_name}\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(get_user_timezone()).strftime('%H:%M')}",
        parse_mode=ParseMode.HTML
    )


# Other handlers
async def handle_auto_publish(query, context):
    """Handle auto-publish settings"""
    data = query.data
    
    if data == "auto_toggle":
        state = await get_state()
        state["auto_publish"] = not state.get("auto_publish", False)
        await save_state()
        await show_auto_publish_menu(query)
    
    elif data.startswith("auto_interval:"):
        interval = int(data.split(":")[1])
        await update_state("publish_interval", interval)
        await show_auto_publish_menu(query)


async def handle_clean_commands(query, context):
    """Handle cleanup commands"""
    data = query.data
    
    if data == "clean_old":
        state = await get_state()
        from bot.utils.state import clean_old_posts
        removed = await clean_old_posts(state)
        await save_state()
        
        await query.edit_message_text(
            "üóë <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤: {removed}",
            parse_mode=ParseMode.HTML
        )
    
    elif data == "clean_pending":
        state = await get_state()
        count = len(state["pending"])
        state["pending"].clear()
        state["preview_mode"].clear()
        state["generated_images"].clear()
        await save_state()
        
        await query.edit_message_text(f"üóë –û—á–∏—â–µ–Ω–æ {count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
    
    elif data == "clean_sent":
        state = await get_state()
        count = len(state["sent_links"])
        state["sent_links"].clear()
        await save_state()
        
        await query.edit_message_text(f"üóë –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {count} –∑–∞–ø–∏—Å–µ–π")


async def handle_tools(query, context):
    """Handle tools menu"""
    data = query.data
    
    if data == "tool_test_sources":
        await query.edit_message_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
        
        from bot.services.parser import parser_service
        results = await parser_service.test_sources()
        
        text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        
        for source, info in results.items():
            if info["status"] == "success":
                text += f"‚úÖ {source}: {info.get('items_count', 0)} –∑–∞–ø–∏—Å–µ–π\n"
            else:
                text += f"‚ùå {source}: {info.get('error', 'Unknown error')}\n"
        
        keyboard = KeyboardBuilder.back_to_main()
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )


async def handle_filters(query, context):
    """Handle tag filters"""
    data = query.data
    state = await get_state()
    
    if data == "filter_tags":
        # Get all unique tags
        all_tags = get_all_unique_tags(state["pending"])
        
        keyboard = KeyboardBuilder.filter_tags(all_tags)
        
        await query.edit_message_text(
            "üè∑ <b>–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    elif data.startswith("filter_"):
        parts = data.split(":")
        if len(parts) == 2:
            filter_type = parts[0].replace("filter_", "")
            filter_value = parts[1]
            
            # Apply filter
            filtered = filter_posts_by_tags(state["pending"], filter_type, filter_value)
            
            if not filtered:
                await query.edit_message_text(f"üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–æ–º {filter_value}")
                return
            
            # Update preview mode
            state["preview_mode"] = {
                "list": filtered,
                "current": 0,
                "filter": {filter_type: filter_value}
            }
            await save_state()
            
            await query.edit_message_text(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered)} –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–æ–º {filter_value}"
            )
            
            # Show first filtered post
            if filtered:
                first_record = state["pending"].get(filtered[0])
                if first_record:
                    post = Post.from_dict(first_record)
                    await send_preview(
                        context.bot,
                        post,
                        query.message.chat.id,
                        0,
                        len(filtered)
                    )
    
    elif data == "filter_reset":
        # Reset filters
        preview_list = sorted(
            state["pending"].keys(),
            key=lambda x: state["pending"][x].get("timestamp", ""),
            reverse=True
        )
        
        state["preview_mode"] = {
            "list": preview_list,
            "current": 0,
            "filter": None
        }
        await save_state()
        
        await query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        
        if preview_list:
            first_record = state["pending"].get(preview_list[0])
            if first_record:
                post = Post.from_dict(first_record)
                await send_preview(
                    context.bot,
                    post,
                    query.message.chat.id,
                    0,
                    len(preview_list)
                )


async def handle_scheduling(query, context):
    """Handle post scheduling"""
    data = query.data
    post_id = data.split(":")[1]
    
    state = await get_state()
    state["waiting_for_schedule"] = post_id
    await save_state()
    
    user_tz = await get_user_timezone(state)
    current_time = datetime.now(user_tz).strftime('%H:%M')
    
    await query.edit_message_text(
        "‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {state.get('timezone', 'UTC')}\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>18:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 18:30\n"
        "‚Ä¢ <code>25.12 15:00</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n"
        "‚Ä¢ <code>+2h</code> - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
        "‚Ä¢ <code>+30m</code> - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ <code>+1d</code> - —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def handle_favorites(query, context):
    """Handle favorites toggle"""
    data = query.data
    post_id = data.split(":")[1]
    
    state = await get_state()
    
    if "favorites" not in state:
        state["favorites"] = []
    
    if post_id in state["favorites"]:
        state["favorites"].remove(post_id)
    else:
        state["favorites"].append(post_id)
    
    await save_state()
    
    # Update preview
    preview_list = state.get("preview_mode", {}).get("list", [])
    if post_id in preview_list:
        idx = preview_list.index(post_id)
        record = state["pending"].get(post_id)
        if record:
            post = Post.from_dict(record)
            await send_preview(
                context.bot,
                post,
                query.message.chat.id,
                idx,
                len(preview_list),
                query.message.message_id
            )


async def handle_generate_cover(query, context):
    """Handle cover generation"""
    data = query.data
    post_id = data.split(":")[-1]
    
    state = await get_state()
    record = state["pending"].get(post_id)
    
    if not record:
        await query.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = Post.from_dict(record)
    
    await query.edit_message_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–ª–æ–∂–∫—É...")
    
    # Generate image
    image_url = await ai_generator.generate_custom_image(
        post.title,
        post.category
    )
    
    if image_url:
        # Save generated image
        post.add_generated_image(image_url)
        state["pending"][post_id] = post.to_dict()
        
        if post_id not in state["generated_images"]:
            state["generated_images"][post_id] = []
        state["generated_images"][post_id].append(image_url)
        
        await save_state()
        
        await query.edit_message_text("‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        
        # Show updated post
        if "full" in data:
            await publisher.send_for_moderation(context.bot, post, query.message.chat.id)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏")


# Export callback handler for registration
callback_handlers = [
    callback_handler
]
